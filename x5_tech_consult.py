from yandexgptlite import YandexGPTLite
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
import re

# Настройка Яндекс GPT
account = YandexGPTLite('b1gkj9us7h17qmk24icr', 'y0_AgAAAABHyBY3AATuwQAAAAEZrRAuAACI3SzNaWtI9LDxzruVh2ZrmvaiHw')

# Авторизация в Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name('x5group-442609-3a0e75858d7e.json', scope)
client = gspread.authorize(creds)

# Открытие таблицы
spreadsheet = client.open("Входящие данные")
worksheet = spreadsheet.sheet1  # Выбор листа по умолчанию (первого)

# Уникальные коды и наименования товаров
product_name_code = {
    "Несквик": "12345",
    "Йогурт Чудо": "12",
    "Coca-Cola": "1001",
    "Pepsi": "1002",
    "Сникерс": "1003",
    "Марс": "1004",
    "Милка": "1005",
    "Шоколад Аленка": "1006",
    "Чай Lipton": "1007",
    "Чай Greenfield": "1008",
    "Чай Tess": "1009",
    "Кофе Nescafe": "1010",
    "Кофе Jacobs": "1011",
    "Кофе Lavazza": "1012",
    "Печенье Oreo": "1013",
    "Печенье Юбилейное": "1014",
    "Сыр Hochland": "1015",
    "Сыр President": "1016",
    "Кетчуп Heinz": "1017",
    "Кетчуп Calve": "1018",
    "Майонез Calve": "1019",
    "Майонез Махеев": "1020",
    "Мороженое Магнат": "1021",
    "Мороженое Чистая Линия": "1022",
    "Мороженое Кореновка": "1023",
    "Сладости Рот Фронт": "1024",
    "Сладости Красный Октябрь": "1025",
    "Чипсы Lay’s": "1026",
    "Чипсы Pringles": "1027",
    "Сухарики Кириешки": "1028",
    "Сухарики 3 Корочки": "1029",
    "Сок Добрый": "1030",
    "Сок Rich": "1031",
    "Сок J7": "1032",
    "Вода BonAqua": "1033",
    "Вода Святой Источник": "1034",
    "Вода Evian": "1035",
    "Молоко Простоквашино": "1036",
    "Молоко Домик в деревне": "1037",
    "Йогурт Danone": "1038",
    "Йогурт Активия": "1039",
    "Сгущенка Рогачев": "1040",
    "Крупа Увелка": "1041",
    "Макароны Борилла": "1042",
    "Макароны Макфа": "1043",
    "Хлеб Бородинский": "1044",
    "Хлеб Нарезной": "1045",
    "Сахар Русский": "1046",
    "Мука Пышка": "1047",
    "Мука Макфа": "1048"
}

# Список всех кодов товаров
product_codes = list(product_name_code.values())
# Полный список регионов России
regions = [
    # Центральный федеральный округ
    "ЦФО", "Центральный федеральный округ (ЦФО)", "Москва", "Московская область", "Владимирская область",
    "Воронежская область", "Ивановская область", "Калужская область", "Костромская область",
    "Курская область", "Липецкая область", "Орловская область", "Рязанская область",
    "Смоленская область", "Тамбовская область", "Тверская область", "Тульская область",
    "Ярославская область",

    # Северо-Западный федеральный округ
    "СЗФО", "Северо-Западный федеральный округ (СЗФО)", "Санкт-Петербург", "Ленинградская область",
    "Архангельская область", "Вологодская область", "Калининградская область", "Карелия",
    "Коми", "Мурманская область", "Новгородская область", "Псковская область",

    # Южный федеральный округ
    "ЮФО", "Южный федеральный округ (ЮФО)", "Краснодарский край", "Астраханская область",
    "Волгоградская область", "Ростовская область", "Республика Адыгея", "Республика Калмыкия",

    # Приволжский федеральный округ
    "ПФО", "Приволжский федеральный округ (ПФО)", "Республика Башкортостан", "Республика Марий Эл",
    "Республика Мордовия", "Республика Татарстан", "Удмуртская Республика", "Чувашская Республика",
    "Кировская область", "Нижегородская область", "Оренбургская область", "Пензенская область",
    "Пермский край", "Самарская область", "Саратовская область", "Ульяновская область",

    # Уральский федеральный округ
    "УФО", "Уральский федеральный округ (УФО)", "Свердловская область", "Челябинская область",
    "Курганская область", "Тюменская область", "Ханты-Мансийский автономный округ (Югра)",
    "Ямало-Ненецкий автономный округ",

    # Сибирский федеральный округ
    "СФО", "Сибирский федеральный округ (СФО)", "Республика Алтай", "Республика Бурятия",
    "Республика Тыва", "Республика Хакасия", "Алтайский край", "Красноярский край",
    "Иркутская область", "Кемеровская область", "Новосибирская область", "Омская область",
    "Томская область", "Забайкальский край",

    # Дальневосточный федеральный округ
    "ДФО", "Дальневосточный федеральный округ (ДФО)", "Республика Саха (Якутия)", "Камчатский край",
    "Приморский край", "Хабаровский край", "Амурская область", "Магаданская область",
    "Сахалинская область", "Еврейская автономная область", "Чукотский автономный округ",

    # Северо-Кавказский федеральный округ
    "СКФО", "Северо-Кавказский федеральный округ (СКФО)", "Республика Дагестан", "Республика Ингушетия",
    "Кабардино-Балкарская Республика", "Карачаево-Черкесская Республика", "Республика Северная Осетия — Алания",
    "Ставропольский край", "Чеченская Республика",

    # Крымский федеральный округ (включён в Южный ФО, но оставлен для совместимости)
    "Республика Крым", "Крым", "Севастополь"
]


# Функция для вставки данных
def insert_data(supplier, region, discount, period):
    row = [supplier, region, discount, period]
    worksheet.append_row(row)  # Вставка строки в таблицу


import re

# Функция для анализа ответа с помощью модели и проверки заявки
def analyze_and_check_with_gpt(input_text):
    # Формируем промт для модели
    prompt = f"""
    Переменные, которые у нас есть:
    - product_code: {product_codes}.
    - product_name: {list(product_name_code.keys())}.
    - product_name_code: {product_name_code}.
    - regions: {regions}.

    Переменные, которые модель должна вычленить из запроса:
    - period: Период проведения промо (№ недели или месяца (если месяц написан буквами, переведи месяц в число)).
    - discount: Скидка поставщика (%).
    - type: 'недельное' / 'месячное'.

    В запросе пользователя ты должен выделить следующие переменные: period, код товара (если нет кода товара, но есть название товара, необходимо по словарю product_name_code получить код товара), скидка, регион.

    Обязательные условия проверки:
    1. Скидка должна быть не менее 20% для недельного промо и не менее 30% для сезонного промо.
    2. Товар может участвовать в промо не чаще 1 раза в месяц.
    3. Периоды промо не должны пересекаться для одного и того же товара.
    4. Код товара должен быть в списке product_code.
    5. Регион должен быть в списке regions.
    6. Если нет кода товара, но есть название, то оно должно быть в списке product_name.

    Если заявка корректна:
    - Подтверди её и сформируй готовую запись для передачи категорийным менеджерам.

    Если заявка некорректна:
    - Верни обратную связь с указанием всех нарушений (например: недостаточная скидка, частота участия, код не найден в списке кодов товаров или пересечение периодов).
    - Добавь рекомендации для исправления заявки.

    Пример ввода:
    Здравствуйте, хотел бы провести недельное промо своего товара Несквик (код 12345) на период 48 недели 24 года. Хотел бы провести это в регионах ЦФО и СЗФО. Скидка будет составлять 15%.

    Пример вывода:
    - type: "недельное"
    - period: "48 неделя 2024 года"
    - product_code: "12345"
    - discount: 15
    - regions: "ЦФО", "СЗФО"

    Ответ модели:
    1. Заявка отклонена.
    2. Проверка параметров: скидка ниже 20%, что не соответствует требованиям.
    3. Рекомендация: Увеличить скидку до 20% или выше.

    Пример ввода 2:
    Меня зовут Никита, я представитель компании Орифлейм. Я хочу предоставить недельную скидку 25% на товар Несквик в ЦФО 11 февраля 2025.

    Пример вывода:
    - type: "недельное"
    - period: "24 неделя 2025 года"
    - product_code: "12345"
    - discount: 25
    - regions: "ЦФО"

    Ответ модели:
    1. Заявка принята.
    2. 'недельное', "24 неделя 2025 год", "12345", 25, "ЦФО".
    """

    # Отправляем промт в модель
    response = account.create_completion(prompt + f"\n\nЗапрос пользователя: {input_text}", '0.6')

    # Выводим ответ модели для отладки
    print(f"Ответ от модели: {response}")

    # Заменяем нестандартные кавычки на стандартные
    response_clean = response.replace('«', '"').replace('»', '"')

    return response_clean.strip()


# Основная функция
def main():
    # Пример входного текста; его можно менять
    input_text = str(input('Введите запрос: '))

    # Анализ текста и проверка заявки с помощью GPT
    response = analyze_and_check_with_gpt(input_text)

    # Проверяем, одобрена ли заявка
    if "Заявка принята" in response:
        # Извлекаем нужные данные из ответа модели
        supplier_match = re.search(r'product_code: "(.+?)"', response)
        region_match = re.search(r'regions: \[(.+?)\]', response)
        discount_match = re.search(r'discount: (\d+)', response)
        period_match = re.search(r'period: "(.+?)"', response)

        if supplier_match and region_match and discount_match and period_match:
            supplier = supplier_match.group(1)
            region = region_match.group(1).replace('"', '').split(", ")
            discount = int(discount_match.group(1))
            period = period_match.group(1)

            # Записываем данные в Google Sheets
            for reg in region:
                insert_data(supplier, reg, discount, period)

            print("Заявка принята и данные успешно добавлены в таблицу.")
        else:
            print("Ошибка извлечения данных из ответа модели.")
    else:
        print(f"Заявка отклонена. Ответ модели:\n{response}")


if __name__ == "__main__":
    main()